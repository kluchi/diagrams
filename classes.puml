@startuml classes

class RegisterUserUsecase {
    - users: UserRepository
    + create_user(data: UserData): User?
}
RegisterUserUsecase --> UserRepository


class GetUserUsecase {
    - users: UserRepository
    + get_user(user_id: UUID): User?
}
GetUserUsecase --> UserRepository

class UpdateProfileUsecase {
    - users: UserRepository
    + update(data:UserData): void
}
UpdateProfileUsecase --> UserRepository


class UpdateAvatarUsecase {
    - users: UserRepository
    - images: MediaRepository
    + upload_avatar(image: Bytes): UUID
    + delete_avatar(image_id: UUID): void
}
UpdateAvatarUsecase --> UserRepository
UpdateAvatarUsecase --> MediaRepository


class User {
    + id: UUID
    + email: EmailStr
    + status: UserStatus
    + password: PasswordHash
    + first_name: str
    + last_name: str
    + bio: str
    + photo: Media?
}

enum UserStatus {
    CREATED
    VERIFIED
}

User *-- Media

User *-- UserStatus

class Media {
    id: UUID
}

interface UserRepository {
    + get(id:UUID): User?
    + get_by_email(email: str): User?
    + save(user: User): User
}


UserRepository o-- User

class PostgresUserRepoImpl {
    - db: PostgresConnection
}

PostgresUserRepoImpl -u-|> UserRepository

interface MediaRepository {
    + upload_image(image: Bytes): UUID
}

MediaRepository o-- Media

class MinioMediaRepoImpl {
    credentials: str
}

MinioMediaRepoImpl -u-|> MediaRepository

RegisterUserUsecase --> NotificationsService

interface NotificationsService {
    + send_verification(user: UUID)
    + send_chat_notification(from:UUID, user: UUID)
    + send_friend_request(from: UUID, user: UUID)
}

class Friendship {
    + user1: User
    + user2: User
    + initiator: User
    + status: FriendshipState
}



enum FriendshipState {
    PENDING
    ACCEPTED
    REJECTED
}

Friendship *-- FriendshipState

Friendship o-- "3" User

interface FriendshipRepository {
    find_request(u1:User, u2:User): Friendship?
    save(link: Friendship)
}

FriendshipRepository o-- Friendship

class PostgresFriendshipRepoImpl {
    - db: PostgresConnection
}

PostgresFriendshipRepoImpl -up-|> FriendshipRepository

class GetFriendsUsecase {
    - friends: FriendshipRepository

    + list(friends_of: UUID): List[UUID]
}

GetFriendsUsecase --> FriendshipRepository

class FriendRequestUsecase {
    - friends: FriendshipRepository
    - users: UserRepository
    - notifications: NotificationsService

    + accept(from: UUID, to: UUID): void
    + send(from: UUID, to: UUID): void
    + reject(from: UUID, to: UUID): void
}


FriendRequestUsecase --> NotificationsService
FriendRequestUsecase --> FriendshipRepository
FriendRequestUsecase --> UserRepository

class Rating {
    from: User
    to: User
    value: int
}

Rating --> "2" User

interface RatingRepository {
    + get(from: UUID, to: UUID): Rating?
    + save(rating: Rating): Rating
    + compute(of: UUID): float?
}

RatingRepository o-- Rating

class RatingsUsecase {
    - ratings: RatingRepository

    + update(from: UUID, to: UUID, value: int): void
    + get_value(user: UUID): float?
}

RatingsUsecase --> RatingRepository

class Message {
    + sender: User
    + text: str
    + order: datetime
}

class Chat {
    + u1: User
    + u2: User
    + messages: List[Message]
}

note right of Chat: invariant: u1.id < u2.id

Chat --> "2" User

Chat o-- Message
Message --> User

interface ChatRepository {
    list_chats(user: UUID): List[Chat]
    get_messages(u1: UUID, u2: UUID, offset: int): List[Message]
    create_message(from: UUID, to: UUID, content: str): Message
}

ChatRepository o-- Chat

class ChatUsecase {
    - notifications: NotificationsService
    - chats: ChatRepository

    get_chats(user: UUID): List[Chat]
    get_messages(u1: UUID, u2: UUID, offset: int): List[Message]
    send_message(from: UUID, to: UUID, content: str): List[Message]
}

ChatUsecase --> ChatRepository
ChatUsecase --> NotificationsService

@enduml